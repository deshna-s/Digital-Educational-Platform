/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UserInterface.MainJFrame;

import Business.Course.Course;
import Business.Faculty.Faculty;
import Business.Job.Job;
import Business.Model.Model;
import Business.Recruiter.Recruiter;
import Business.Role.Role;
import Business.Student.Student;
import UserInterface.Faculty.RegisterFacultyJFrame;
import UserInterface.Recruiter.RecruiterJFrame;
import UserInterface.Recruiter.RegisterRecruiterJFrame;
import UserInterface.Student.StudentRegisterJFrame;
import Business.UserAccount.UserAccount;
import Business.UserAccount.UserAccountDirectory;
import java.awt.HeadlessException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author dhirt, deshna, anisha
 */
public class MainJFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainJFrame
     */
    Model model;
    UserAccount userAccount;
    UserAccountDirectory topLevelUserAccountDirectory;
    

    public MainJFrame() {
        initComponents();
        this.model = Model.getInstance();
        this.topLevelUserAccountDirectory = model.getTopLevelUserAccountDirectory();

        initialization();
        populateDropdown();
        populateDropdown1();
    }

    public MainJFrame(Model model, UserAccount userAccount) {
        initComponents();
        this.setVisible(true);

        this.model = model;
        this.userAccount = userAccount;
        this.topLevelUserAccountDirectory = topLevelUserAccountDirectory;

        populateDropdown();
        populateDropdown1();
    }

    public void populateDropdown() {
        jComboBoxRegister.removeAllItems();

        for (String rolename : Role.getAllRoles()) {
            jComboBoxRegister.addItem(rolename);
        }
    }

    public void populateDropdown1() {
        jComboBoxLogin.removeAllItems();

        for (String roleName : Role.getAllRoles()) {
            jComboBoxLogin.addItem(roleName);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblExistingUser = new javax.swing.JLabel();
        lblNewUser = new javax.swing.JLabel();
        lblUserName = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        txtUserName = new javax.swing.JTextField();
        txtPassword = new javax.swing.JTextField();
        jComboBoxLogin = new javax.swing.JComboBox<>();
        jComboBoxRegister = new javax.swing.JComboBox<>();
        btnLogin = new javax.swing.JButton();
        btnRegister = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));

        jLabel1.setFont(new java.awt.Font("Modern No. 20", 1, 24)); // NOI18N
        jLabel1.setText("PROFESSOR AS A SERVICE");

        lblExistingUser.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblExistingUser.setText("EXISTING USER");

        lblNewUser.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblNewUser.setText("NEW USER");

        lblUserName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblUserName.setText("Username");

        lblPassword.setText("Password");

        jComboBoxLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxLoginActionPerformed(evt);
            }
        });

        btnLogin.setText("Login");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        btnRegister.setText("Register");
        btnRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(268, 268, 268)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(116, 116, 116)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(55, 55, 55)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboBoxLogin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnLogin)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 172, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnRegister)
                            .addComponent(jComboBoxRegister, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblNewUser, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(336, 336, 336))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(182, 182, 182)
                .addComponent(lblExistingUser, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1)
                .addGap(64, 64, 64)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblExistingUser)
                    .addComponent(lblNewUser))
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUserName)
                    .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxRegister, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPassword)
                    .addComponent(btnRegister))
                .addGap(18, 18, 18)
                .addComponent(jComboBoxLogin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnLogin)
                .addContainerGap(289, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        // TODO add your handling code here:

        Boolean foundUser = false;
        String selectedSearchType = jComboBoxLogin.getSelectedItem().toString();
        Student st = new Student();
        Faculty fac = new Faculty();
        Recruiter rec = new Recruiter();
        st.setRoleValue("student");
        fac.setRoleFaculty("faculty");
        rec.setRoleRecruiter("recruiter");
        String roleStudent = st.getRoleValue();
        String roleFaculty = fac.getRoleFaculty();
        String roleRecruiter = rec.getRoleRecruiter();
        String adminUserName = "admin";
        String tpUserName = "tp";
//        String roleAdmin= st.getRoleValue();
//        String roleThirdParty= st.getRoleValue();

//        System.out.println("Values" + roleStudent);
//Student
        if ((selectedSearchType.equals("faculty") || selectedSearchType.equals("admin") || selectedSearchType.equals("thirdParty")
                || selectedSearchType.equals("recruiter"))
                && (txtUserName.getText().equals("u0")
                && txtPassword.getText().equals("p0"))) {
            JOptionPane.showMessageDialog(this, "Invalid Cerdentials");
            return;
        }
        if ((selectedSearchType.equals("faculty") || selectedSearchType.equals("admin") || selectedSearchType.equals("thirdParty")
                || selectedSearchType.equals("recruiter"))
                && (txtUserName.getText().equals("u1")
                && txtPassword.getText().equals("p1"))) {
            JOptionPane.showMessageDialog(this, "Invalid Cerdentials");
            return;
        }
        if ((selectedSearchType.equals("faculty") || selectedSearchType.equals("admin") || selectedSearchType.equals("thirdParty")
                || selectedSearchType.equals("recruiter"))
                && (txtUserName.getText().equals("u2")
                && txtPassword.getText().equals("p2"))) {
            JOptionPane.showMessageDialog(this, "Invalid Cerdentials");
            return;
        }
        if ((selectedSearchType.equals("faculty") || selectedSearchType.equals("admin") || selectedSearchType.equals("thirdParty")
                || selectedSearchType.equals("recruiter"))
                && (txtUserName.getText().equals("u3")
                && txtPassword.getText().equals("p3"))) {
            JOptionPane.showMessageDialog(this, "Invalid Cerdentials");
            return;
        }
        if ((selectedSearchType.equals("faculty") || selectedSearchType.equals("admin") || selectedSearchType.equals("thirdParty")
                || selectedSearchType.equals("recruiter"))
                && (txtUserName.getText().equals("u4")
                && txtPassword.getText().equals("p4"))) {
            JOptionPane.showMessageDialog(this, "Invalid Cerdentials");
            return;
        }
        if ((selectedSearchType.equals("faculty") || selectedSearchType.equals("admin") || selectedSearchType.equals("thirdParty")
                || selectedSearchType.equals("recruiter"))
                && (txtUserName.getText().equals("u5")
                && txtPassword.getText().equals("p5"))) {
            JOptionPane.showMessageDialog(this, "Invalid Cerdentials");
            return;
        }
        if ((selectedSearchType.equals("faculty") || selectedSearchType.equals("admin") || selectedSearchType.equals("thirdParty")
                || selectedSearchType.equals("recruiter"))
                && (txtUserName.getText().equals("u6")
                && txtPassword.getText().equals("p6"))) {
            JOptionPane.showMessageDialog(this, "Invalid Cerdentials");
            return;
        }
        if ((selectedSearchType.equals("faculty") || selectedSearchType.equals("admin") || selectedSearchType.equals("thirdParty")
                || selectedSearchType.equals("recruiter"))
                && (txtUserName.getText().equals("u7")
                && txtPassword.getText().equals("p7"))) {
            JOptionPane.showMessageDialog(this, "Invalid Cerdentials");
            return;
        }
        if ((selectedSearchType.equals("faculty") || selectedSearchType.equals("admin") || selectedSearchType.equals("thirdParty")
                || selectedSearchType.equals("recruiter"))
                && (txtUserName.getText().equals("u8")
                && txtPassword.getText().equals("p8"))) {
            JOptionPane.showMessageDialog(this, "Invalid Cerdentials");
            return;
        }
        if ((selectedSearchType.equals("faculty") || selectedSearchType.equals("admin") || selectedSearchType.equals("thirdParty")
                || selectedSearchType.equals("recruiter"))
                && (txtUserName.getText().equals("u9")
                && txtPassword.getText().equals("p9"))) {
            JOptionPane.showMessageDialog(this, "Invalid Cerdentials");
            return;
        }
////        Faculty
        if ((selectedSearchType.equals("student") || selectedSearchType.equals("admin") || selectedSearchType.equals("thirdParty")
                || selectedSearchType.equals("recruiter"))
                && (txtUserName.getText().equals("f0")
                && txtPassword.getText().equals("t0"))) {
            JOptionPane.showMessageDialog(this, "Invalid Cerdentials");
            return;
        }
        if ((selectedSearchType.equals("student") || selectedSearchType.equals("admin") || selectedSearchType.equals("thirdParty")
                || selectedSearchType.equals("recruiter"))
                && (txtUserName.getText().equals("f1")
                && txtPassword.getText().equals("t1"))) {
            JOptionPane.showMessageDialog(this, "Invalid Cerdentials");
            return;
        }
        if ((selectedSearchType.equals("student") || selectedSearchType.equals("admin") || selectedSearchType.equals("thirdParty")
                || selectedSearchType.equals("recruiter"))
                && (txtUserName.getText().equals("f2")
                && txtPassword.getText().equals("t2"))) {
            JOptionPane.showMessageDialog(this, "Invalid Cerdentials");
            return;
        }
        if ((selectedSearchType.equals("student") || selectedSearchType.equals("admin") || selectedSearchType.equals("thirdParty")
                || selectedSearchType.equals("recruiter"))
                && (txtUserName.getText().equals("f3")
                && txtPassword.getText().equals("t3"))) {
            JOptionPane.showMessageDialog(this, "Invalid Cerdentials");
            return;
        }
        if ((selectedSearchType.equals("student") || selectedSearchType.equals("admin") || selectedSearchType.equals("thirdParty")
                || selectedSearchType.equals("recruiter"))
                && (txtUserName.getText().equals("f4")
                && txtPassword.getText().equals("t4"))) {
            JOptionPane.showMessageDialog(this, "Invalid Cerdentials");
            return;
        }
        if ((selectedSearchType.equals("student") || selectedSearchType.equals("admin") || selectedSearchType.equals("thirdParty")
                || selectedSearchType.equals("recruiter"))
                && (txtUserName.getText().equals("f5")
                && txtPassword.getText().equals("t5"))) {
            JOptionPane.showMessageDialog(this, "Invalid Cerdentials");
            return;
        }
        if ((selectedSearchType.equals("student") || selectedSearchType.equals("admin") || selectedSearchType.equals("thirdParty")
                || selectedSearchType.equals("recruiter"))
                && (txtUserName.getText().equals("f6")
                && txtPassword.getText().equals("t6"))) {
            JOptionPane.showMessageDialog(this, "Invalid Cerdentials");
            return;
        }
        if ((selectedSearchType.equals("student") || selectedSearchType.equals("admin") || selectedSearchType.equals("thirdParty")
                || selectedSearchType.equals("recruiter"))
                && (txtUserName.getText().equals("f7")
                && txtPassword.getText().equals("t7"))) {
            JOptionPane.showMessageDialog(this, "Invalid Cerdentials");
            return;
        }
        if ((selectedSearchType.equals("student") || selectedSearchType.equals("admin") || selectedSearchType.equals("thirdParty")
                || selectedSearchType.equals("recruiter"))
                && (txtUserName.getText().equals("f8")
                && txtPassword.getText().equals("t8"))) {
            JOptionPane.showMessageDialog(this, "Invalid Cerdentials");
            return;
        }
        if ((selectedSearchType.equals("student") || selectedSearchType.equals("admin") || selectedSearchType.equals("thirdParty")
                || selectedSearchType.equals("recruiter"))
                && (txtUserName.getText().equals("f9")
                && txtPassword.getText().equals("t9"))) {
            JOptionPane.showMessageDialog(this, "Invalid Cerdentials");
            return;
        }
//        admin 
        if ((selectedSearchType.equals("student") || selectedSearchType.equals("thirdParty")
                || selectedSearchType.equals("recruiter")
                || selectedSearchType.equals("faculty"))
                && (txtUserName.getText().equals("admin")
                && txtPassword.getText().equals("pass"))) {
            JOptionPane.showMessageDialog(this, "Invalid Cerdentials");
            return;
        }
//        Third Party 
        if ((selectedSearchType.equals("student") || selectedSearchType.equals("admin")
                || selectedSearchType.equals("recruiter")
                || selectedSearchType.equals("faculty"))
                && (txtUserName.getText().equals("tp")
                && txtPassword.getText().equals("tp"))) {
            JOptionPane.showMessageDialog(this, "Invalid Cerdentials");
            return;
        }
//      Recruiter          
        if ((selectedSearchType.equals("student") || selectedSearchType.equals("admin")
                || selectedSearchType.equals("thirdParty")
                || selectedSearchType.equals("faculty"))
                && (txtUserName.getText().equals("r0")
                && txtPassword.getText().equals("e0")
                && txtUserName.getText().equals("r1")
                && txtPassword.getText().equals("e1")
                && txtUserName.getText().equals("r2")
                && txtPassword.getText().equals("e2")
                && txtUserName.getText().equals("r3")
                && txtPassword.getText().equals("e3")
                && txtUserName.getText().equals("r4")
                && txtPassword.getText().equals("e4"))) {
            JOptionPane.showMessageDialog(this, "Invalid Cerdentials");
            return;
        }

        switch (selectedSearchType) {
            case "student":
                if (this.model.getTopLevelUserAccountDirectory().authenticateUser(txtUserName.getText(), txtPassword.getText()) != null && selectedSearchType.equals("student")) {
                    // Login the student
                    UserAccount user = (UserAccount) this.model.getTopLevelUserAccountDirectory().authenticateUser(txtUserName.getText(), txtPassword.getText());
                    foundUser = true;
                    user.getRole().createWorkArea(this.model, user);
                    this.setVisible(false);
                }
                break;

            case "faculty":
                if (this.model.getTopLevelUserAccountDirectory().authenticateUser(txtUserName.getText(), txtPassword.getText()) != null && selectedSearchType.equals("faculty")) {
                    // Login the faculty member
                    UserAccount user = (UserAccount) this.model.getTopLevelUserAccountDirectory().authenticateUser(txtUserName.getText(), txtPassword.getText());
                    foundUser = true;
                    user.getRole().createWorkArea(this.model, user);
                    this.setVisible(false);
                }
                break;

            case "admin":
                if (this.model.getTopLevelUserAccountDirectory().authenticateUser(txtUserName.getText(), txtPassword.getText()) != null) {
//                    if (txtUserName.getText().equals("admin") && txtPassword.getText().equals("pass") && jComboBoxRegister.getSelectedItem().toString().equals("admin")) {
                        // Login the admin
                        UserAccount user = (UserAccount) this.model.getTopLevelUserAccountDirectory().authenticateUser(txtUserName.getText(), txtPassword.getText());
                        foundUser = true;
                        user.getRole().createWorkArea(this.model, user);
                        this.setVisible(false);
                    
                }
                break;

            case "thirdParty":
                if (this.model.getTopLevelUserAccountDirectory().authenticateUser(txtUserName.getText(), txtPassword.getText()) != null && txtUserName.getText().equals("tp") && txtPassword.getText().equals("tp")) {
                    // Login the third party user
                    UserAccount user = (UserAccount) this.model.getTopLevelUserAccountDirectory().authenticateUser(txtUserName.getText(), txtPassword.getText());
                    foundUser = true;
                    user.getRole().createWorkArea(this.model, user);
                    this.setVisible(false);
                }
                break;

            case "recruiter":
                if (this.model.getTopLevelUserAccountDirectory().authenticateUser(txtUserName.getText(), txtPassword.getText()) != null && jComboBoxRegister.getSelectedItem().toString().equals("recruiter")) {
                    // Login the recruiter
                    System.out.print(jComboBoxRegister.getSelectedItem().toString());
                    UserAccount user = (UserAccount) this.model.getTopLevelUserAccountDirectory().authenticateUser(txtUserName.getText(), txtPassword.getText());
                    foundUser = true;
                    user.getRole().createWorkArea(this.model, user);
                    this.setVisible(false);
                }
                break;

            default:
                break;
        }

//        if(this.model.getTopLevelUserAccountDirectory().authenticateUser(txtUserName.getText(), txtPassword.getText()) != null) {
//            UserAccount user = (UserAccount) this.model.getTopLevelUserAccountDirectory().authenticateUser(txtUserName.getText(), txtPassword.getText());
//            foundUser = true;
////            System.out.println(jComboBoxLogin.getSelectedItem());
//            user.getRole().createWorkArea(this.model, user);
//            this.setVisible(false);
//    }
////        // if user not found
//          if(!foundUser) {
//           JOptionPane.showMessageDialog(null, "Invalid Credentials");
//        }

    }//GEN-LAST:event_btnLoginActionPerformed

    private void initialization() {
       
//        Student
        for (int i = 0; i < 10; i++) {
            //String studentID = fstudentID.getText();
            String studentName = "STU" + i;
            String degreeName = "MS in IS" + i;
            String email = studentName + "@" + i;
            String username = "u" + i;
            String password = "p" + i;

            Student student = this.model.getStudentDirectory().createStudent(studentName, degreeName, email, username, password);

            UserAccount userAccount = student.getUserAccount();

            this.model.getTopLevelUserAccountDirectory().getUserAccountList().add(userAccount);

            //student.setStudentId(studentID);
            student.setName(studentName);
            student.setDegreeName(degreeName);
            student.setEmail(email);
            student.getUserAccount().setUsername(username);
            student.getUserAccount().setPassword(password);

        }
//     Faculty   
        for (int j = 0; j < 10; j++) {
            String facultyName = "PROF-" + j;
            String email = facultyName + "@" + j;
            String location = "Boston" + j;
            String username = "f" + j;
            String password = "t" + j;
            Faculty faculty = this.model.getFacultyDirectory().createFaculty(facultyName, email, location, username, password);

            UserAccount userAccount = faculty.getUserAccount();

            this.model.getTopLevelUserAccountDirectory().getUserAccountList().add(userAccount);

            //student.setStudentId(studentID);
            faculty.setName(facultyName);
            faculty.setEmail(email);
            faculty.setLocation(location);
            faculty.getUserAccount().setUsername(username);
            faculty.getUserAccount().setPassword(password);

        }

//        Recruiter
        for (int r = 0; r < 5; r++) {

            String recruiterName = "RECRU-" + r;
            String email = recruiterName + "@" + r;
            String companyName = "MNC" + r;
            String location = "NYC" + r;
            String username = "r" + r;
            String password = "e" + r;
            String  jobPosistion = "Analyst"+r;
            String jobDescription= "SDLC"+r+" programming Language"+r;
            String salary="10,000"; 
            String field="IT";
            


            Recruiter recruiter = this.model.getRecruiterDirectory().createRecruiter(recruiterName, companyName, location, email, username, password);
//            displayJob();
  
            UserAccount userAccount = recruiter.getUserAccount();

            this.model.getTopLevelUserAccountDirectory().getUserAccountList().add(userAccount);

            recruiter.setName(recruiterName);
            recruiter.setEmail(email);
            recruiter.setJobPosistion(jobPosistion);
            recruiter.setJobDescription(jobDescription);
            recruiter.setSalary(salary);
            recruiter.setField(field);
            recruiter.setCompanyName(companyName);
            recruiter.setLocation(location);
            recruiter.getUserAccount().setUsername(username);
            recruiter.getUserAccount().setPassword(password);

        }
        for (int c = 0; c < 3; c++) {

            String courseName = "COUR-" + c;
            String facultyName = "PROF-" + c;
            int credits = 4;
            float price = 1200;
            String language = "english";
            String topic = "DMDD";
//            String personId = this.userAccount.getPersonId();
            Faculty prof = null;
            String semester = "1";

// public Course createCourse(String courseName, int credits, float price, String language, String topic, Faculty faculty, String semester)
            Course course = this.model.getCourseDirectory().createCourse(courseName, credits, price, language, topic, prof, semester);

//            UserAccount userAccount = course.getUserAccount();
            this.model.getTopLevelUserAccountDirectory().getUserAccountList().add(userAccount);

            course.setCourseName(courseName);
            course.setCredits(credits);
            course.setPrice(price);
            course.setLanguage(language);
            course.setTopic(topic);
//            course.setLocation(prof);
            course.setSemester(semester);

        }
//                for (int c = 0; c < 3; c++) {
//
//            String courseName = "COUR-" + c;
//            String facultyName = "PROF-" + c;
//            int credits = 4;
//            float price = 1200;
//            String language = "english";
//            String topic = "DMDD";
////            String personId = this.userAccount.getPersonId();
//            Faculty prof = null;
//            String semester = "1";
//
//// public Course createCourse(String courseName, int credits, float price, String language, String topic, Faculty faculty, String semester)
//            Course course = this.model.getCourseDirectory().createCourse(courseName, credits, price, language, topic, prof, semester);
//
////            UserAccount userAccount = course.getUserAccount();
//            this.model.getTopLevelUserAccountDirectory().getUserAccountList().add(userAccount);
//
//            course.setCourseName(courseName);
//            course.setCredits(credits);
//            course.setPrice(price);
//            course.setLanguage(language);
//            course.setTopic(topic);
////            course.setLocation(prof);
//            course.setSemester(semester);
//
//        }
    }

    private void btnRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterActionPerformed
        // TODO add reyour handling code here:
        if (jComboBoxRegister.getSelectedItem().equals("student")) {
            StudentRegisterJFrame saf = new StudentRegisterJFrame(this, model, topLevelUserAccountDirectory, userAccount);
            saf.setVisible(true);
            this.setVisible(false);
        }

        if (jComboBoxRegister.getSelectedItem().equals("faculty")) {
            RegisterFacultyJFrame saf = new RegisterFacultyJFrame(this, model, topLevelUserAccountDirectory);
            saf.setVisible(true);
            this.setVisible(false);
        }

        if (jComboBoxRegister.getSelectedItem().equals("admin")) {
            JOptionPane.showMessageDialog(null, "You cannot register a new admin user!");
        }

        if (jComboBoxRegister.getSelectedItem().equals("thirdParty")) {
            JOptionPane.showMessageDialog(null, "You cannot register a third party user account!");
        }
        if (jComboBoxRegister.getSelectedItem().equals("recruiter")) {
            RegisterRecruiterJFrame saf = new RegisterRecruiterJFrame(this, model, topLevelUserAccountDirectory);
            saf.setVisible(true);
            this.setVisible(false);
        }

    }//GEN-LAST:event_btnRegisterActionPerformed

    
    
    private void jComboBoxLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxLoginActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jComboBoxLoginActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnRegister;
    private javax.swing.JComboBox<String> jComboBoxLogin;
    private javax.swing.JComboBox<String> jComboBoxRegister;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblExistingUser;
    private javax.swing.JLabel lblNewUser;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblUserName;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtUserName;
    // End of variables declaration//GEN-END:variables

}
